global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: demo
    namespace: demo


rule_files:
  - 'rules.yml'
alerting:
  alertmanagers:
    - scheme: http
      static_configs:
        - targets: ['192.168.137.1:9093']

scrape_configs:
  - job_name: 'container1'
    static_configs:
      - targets: ['192.168.137.1:5001']  # Replace 'port1' with the port of your first Node.js application.
  - job_name: 'container2'
    static_configs:
      - targets: ['192.168.137.1:6001']  # Replace 'port2' with the port of your second Node.js application.
  - job_name: 'container3'
    static_configs:
      - targets: ['192.168.137.1:4001']  # Replace 'port3' with the port of your third Node.js application.
  - job_name: demo/mimir
    static_configs:
      - targets: ["mimir-1:8080"]
        labels:
          pod: "mimir-1"
      - targets: ["mimir-2:8080"]
        labels:
          pod: "mimir-2"
      - targets: ["mimir-3:8080"]
        labels:
          pod: "mimir-3"


remote_write:
  - url: http://192.168.137.1:9009/api/v1/push
    # Add X-Scope-OrgID header so that Mimir knows what tenant the remote write data should be stored in.
    # In this case, our tenant is "demo"
    headers:
      X-Scope-OrgID: demo

